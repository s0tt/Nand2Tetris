// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A-Instruction:
    Not(in=instruction[15], out=opCodeIsA);
    Not(in=opCodeIsA, out=opCodeIsC);  

    //select which value to store in A based on OPCODE
    Mux16(a=outALU, b=instruction, sel=opCodeIsA, out=muxOut);

    //select when to store in A register -define load trigger
    Or(a=instruction[5], b=opCodeIsA, out=triggerALoad);
    ARegister(in=muxOut, load=triggerALoad, out=aOut);

    //output mem address from a register
    Mux16(a=aOut, b=aOut, sel=true, out[0..14]=addressM);

    //storing alu in D when dest=D,MD,AD,AMD  and C-instruction --> D is ALU input x
    And(a=opCodeIsC, b=instruction[4], out=storeInD);
    DRegister(in=outALU, load=storeInD, out=dOut);

    //compute ALU input -->  is ALU input y
    //select input for ALU by a-Flag in the C-instruction (memory M vs. register A)
    Mux16(a=aOut, b=inM, sel=instruction[12], out=aMux16Mout);
    ALU(x=dOut, y=aMux16Mout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=zr, ng=ng);
    Mux16(a=outALU, b=outALU, sel=true, out=outM);

    //storing alu in M whe dest=M,MD,AM,AMD and C-instruction
    And(a=instruction[3], b=opCodeIsC, out=writeM);
    //And(a=instruction[3], b=opCodeIsC, out=writeMinCinst);
    //Or(a=writeMinCinst, b=opCodeIsA, out=writeM);

    //calc program counter
    //PC(in=aOut, load=opCodeIsA, inc=opCodeIsC, reset=reset, out[0..14]=pc);
    //JMP bits ALU ng = <0 zr = =0
    Not(in=ng, out=notNG);
    Not(in=zr, out=notZR);
    And(a=notNG, b=notZR, out=JGT);
    Or(a=JGT, b=zr, out=JGE);
    Or(a=ng, b=zr, out=JLE);

    //Replace Mux8Way as coursera system can't handle my own defined chip
    //Mux8Way(a=false, b=JGT, c=zr, d=JGE, e=ng, f=notZR, g=JLE, h=true, sel=instruction[0..2], out=triggerJmp);
    //MUX8WAY START
    Mux(a=false,b=JGT,sel=instruction[0],out=outAB);
    Mux(a=zr,b=JGE,sel=instruction[0],out=outCD);
    Mux(a=ng,b=notZR,sel=instruction[0],out=outEF);
    Mux(a=JLE,b=true,sel=instruction[0],out=outGH);
    Mux(a=outAB,b=outCD,sel=instruction[1],out=outABCD);
    Mux(a=outEF,b=outGH,sel=instruction[1],out=outEFGH);
    Mux(a=outABCD,b=outEFGH,sel=instruction[2],out=triggerJmp);
    //MUX8WAY END

    And(a=triggerJmp, b=opCodeIsC, out= triggerJmpFinal);
    PC(in=aOut, load=triggerJmpFinal, inc=true, reset=reset, out[0..14]=pc); 
}